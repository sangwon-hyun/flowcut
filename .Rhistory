datobj <- res$dat.info
dim(res$pos.Sigma)
Nmc <- dim(res$pos.Sigma)[4]
plot(1:length(res$pos.avgloglik), res$pos.avgloglik,type="l",lwd=2)
MM <- Nmc ## only use last MM draws for inference
var.labels <- c("intercept",rownames(datobj$X))
cols <- RColorBrewer::brewer.pal(datobj$numclust,"Paired") ## K need to be <=12
K <- datobj$numclust
dimdat <- 3
par(mfrow = c(dimdat, K))
p <- dim(datobj$X)[1] +1
dimdat <- ncol(datobj$ylist[[1]])
par(mfrow = c(dimdat,K), mar = c(2,2,2,2))
for(pp in 1:p){
for(dd in 1:dimdat){
for(kk in 1:K){
title <- paste("dim = ", dd, ", clust = ", kk," var. = ", var.labels[pp], sep = " ")
nn <- length(res$pos.beta[dd,pp,kk,])
plot(res$pos.beta[dd,pp,kk,(nn-MM+1):nn],
type="l", main=title, lwd = 2, col = cols[kk])
cat("\n\n\\pagebreak\n")
}
}
}
MM <- Nmc ## only use last MM draws for inference
var.labels <- c("intercept",rownames(datobj$X))
cols <- RColorBrewer::brewer.pal(datobj$numclust,"Paired") ## K need to be <=12
K <- datobj$numclust
dimdat <- 3
par(mfrow = c(dimdat, K))
p <- dim(datobj$X)[1] +1
dimdat <- ncol(datobj$ylist[[1]])
par(mfrow = c(dimdat,K), mar = c(2,2,2,2))
for(pp in 1:p){
for(dd in 1:dimdat){
for(kk in 1:K){
title <- paste("dim = ", dd, ", clust = ", kk," var. = ", var.labels[pp], sep = " ")
nn <- length(res$pos.beta[dd,pp,kk,])
cat("\n\n\\blandscape\n")
plot(res$pos.beta[dd,pp,kk,(nn-MM+1):nn],
type="l", main=title, lwd = 2, col = cols[kk])
cat("\n\n\\elandscape\n")
cat("\n\n\\pagebreak\n")
}
}
}
library("flowcut")
library("tidyverse")
library("tidyverse")
library("flowcut")
dir.output <- "~/Dropbox/code/output/MCMC-image/"
res.name <- "MCMC-numclust10-241018.rds"
res <- readRDS(file = paste(dir.output, res.name,sep = ""))  ### mcmc output
res.name2 <- "MCMC-numclust10-241018.rds"
res.name == res.name2
res <- readRDS(file = paste(dir.output, res.name,sep = ""))  ### mcmc output
typeof(res.name2)
library("tidyverse")
library("tidyverse")
library("flowmix")
library("flowcut")
dir.output <- "~/Dropbox/code/output/MCMC-image/"
res.name <- paste0('MCMC-numclust', params$numclust[1],'-',params$timestamp[1],'.rds')
res.name <- paste0('MCMC-numclust', 10,'-',241018,'.rds')
res <- readRDS(file = paste(dir.output, res.name,sep = ""))  ### mcmc output object
res$prior.spec ## hyper-parameters used in the MCMC
datobj <- res$dat.info
dim(res$pos.beta)  ## dimdat, p, numclust, Nmc
Nmc <- dim(res$pos.beta)[4]
cols <- RColorBrewer::brewer.pal(datobj$numclust,"Paired") ## K need to be <=12
numclust <- K <- datobj$numclust
p <- dim(datobj$X)[1] +1 ## with intercept
dimdat <- ncol(datobj$ylist[[1]])
TT <- length(res$dat.info$ylist)
var.labels <- c("intercept",rownames(datobj$X))
dim.labels <- colnames(datobj$ylist[[1]])
cytogram.dim <- colnames(res$last.imputed$last.ylist[[1]])
MM <- floor(Nmc*0.333)
dim(datobj$X) ## p x TT
pos.mn <- list()
for(kk in 1:numclust){
pos.mn[[kk]] <- mclapply(1:dim(res$pos.beta)[4], function(mm){
res$pos.beta[,,kk,mm,drop=TRUE]%*% rbind(1,datobj$X)},
mc.cores = detectCores())%>%
abind::abind(.,along=3)
}
post.mn.mean <- lapply(pos.mn, function(aa){
apply(aa[,, MM:Nmc],c(1,2),mean)}) %>%
abind::abind(.,along=3) %>%  aperm(., c(2,1,3))
post.Sigma <- lapply(1:numclust, function(kk){
apply(res$pos.Sigma[,,kk,MM:Nmc], c(1,2), mean)})%>%
abind::abind(.,along=3) %>%  aperm(., c(3,1,2))
pos.SB <- apply(res$pos.gamma, c(2,3), function(ga)
1/(1+exp(-t(ga) %*% rbind(1,datobj$X))))
pos.MN <- apply(pos.SB, c(1,3), flowcut:::SB2MN)
post.pi.mean <- apply(pos.MN[,, MM:Nmc],c(1,2), mean) %>% t()
dimnames = c("diam", "red", "orange")
for(tt in c(50,100,150,200)){
plist = lapply(list(c(1,2), c(2,3), c(3,1)), function(dims){
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
y = res$last.imputed$last.ylist[[tt]][,dims]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
})
gridExtra::grid.arrange(plist[[1]], plist[[2]], plist[[3]], nrow = 1,
top = paste0("t = ", tt, " out of ", TT))
}
tt
dims
dims = c(1,2)
y = res$last.imputed$last.ylist[[tt]][,dims]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
head(y)
ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_tile(alpha = 1) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point() +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point(alpha = 0.05) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
1+1
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point(alpha = 0.5) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point() +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point(alpha = 0.05) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p
dimnames = c("diam", "red", "orange")
for(tt in c(50,100,150,200)){
plist = lapply(list(c(1,2), c(2,3), c(3,1)), function(dims){
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
y = res$last.imputed$last.ylist[[tt]][,dims]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point(alpha = 0.05) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
})
gridExtra::grid.arrange(plist[[1]], plist[[2]], plist[[3]], nrow = 1,
top = paste0("t = ", tt, " out of ", TT))
}
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point(alpha = 0.05, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-0.5,9)) +  xlim(c(-0.5,9))
p
p = flowmix::add_model_2d(p, mn, sigma, prob)
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2))) +
geom_point(alpha = 0.05, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-1,10)) +  xlim(c(-1,10))
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.05, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-1,12)) +  xlim(c(-1,12))
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
z = res$last.imputed$last.Z.list[[tt]]
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.05, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-1,12)) +  xlim(c(-1,12))
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.1, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-1,12)) +  xlim(c(-1,12))
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-1,12)) +  xlim(c(-1,12))
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-2,12)) +  xlim(c(-2,12))
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
res$dat.info$Cbox
Cbox = res$dat.info$Cbox
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(c(-2,12)) +  xlim(c(-2,12))+
geom_rect(aes(xmin = Cbox[dims[1],1], xmax = Cbox[dims[1],2],
ymin = Cbox[dims[2],1], ymax = Cbox[dims[2],2]), color = "blue", fill = NA)
p = flowmix::add_model_2d(p, mn, sigma, prob)
p
tmp = lapply(res$last.imputed$last.ylist, function(yy) max(yy))
length(tmp)
tmp[[1]]
res$last.imputed$last.ylist[[1]] %>% max()
res$last.imputed$last.ylist[[1]] %>% dim()
res$last.imputed$last.ylist[[1]] %>% rowMax()
res$last.imputed$last.ylist[[1]] %>% Rfast::colMaxs(.,value=TRUE)
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(.,value=TRUE))
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))
dim(tmp)
dim(tmp[[1]])
length(tmp[[1]])
tmp[[1]]
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% rbind()
dim(tmp)
tmp[,1]
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind, .)
dim(tmp)
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
tmp
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE) * 0.99
tmp
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE) * 0.9
tmp
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.95
ymin
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE)
ymin
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE) * 0.9
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.75 * ymax + 0.25 * Cbox[,2]
ymax
ymin = 0.5 * (ymin - Cbox[,1]) + Cbox[,1]
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymin = 0.5 * (ymin - Cbox[,1]) + Cbox[,1]
ymin
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.5 * (ymax - Cbox[,2]) + Cbox[,2]
ymax
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.7 * (ymax - Cbox[,2]) + Cbox[,2]
ymax
lims = cbind(ymin, ymax)
lims
Cbox = res$dat.info$Cbox
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.7 * (ymax - Cbox[,2]) + Cbox[,2]
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymin = 0.7 * (ymin - Cbox[,1]) + Cbox[,1]
lims = cbind(ymin, ymax)
dimnames = c("diam", "red", "orange")
for(tt in c(50,100,150,200)){
plist = lapply(list(c(1,2), c(2,3), c(3,1)), function(dims){
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
y = res$last.imputed$last.ylist[[tt]][,dims]
z = res$last.imputed$last.Z.list[[tt]]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(lims[dims[2],]) +  xlim(lims[dims[1],])+
geom_rect(aes(xmin = Cbox[dims[1],1], xmax = Cbox[dims[1],2],
ymin = Cbox[dims[2],1], ymax = Cbox[dims[2],2]),
color = "blue", fill = NA)
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
})
gridExtra::grid.arrange(plist[[1]], plist[[2]], plist[[3]], nrow = 1,
top = paste0("t = ", tt, " out of ", TT))
}
Cbox = res$dat.info$Cbox
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.6 * (ymax - Cbox[,2]) + Cbox[,2]
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymin = 0.6 * (ymin - Cbox[,1]) + Cbox[,1]
lims = cbind(ymin, ymax)
dimnames = c("diam", "red", "orange")
for(tt in seq(from=1, to = 296, by = 10)){
plist = lapply(list(c(1,2), c(2,3), c(3,1)), function(dims){
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
y = res$last.imputed$last.ylist[[tt]][,dims]
z = res$last.imputed$last.Z.list[[tt]]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_scattermore(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
xlim(lims[dims[1],])+ ylim(lims[dims[2],]) +
geom_rect(aes(xmin = Cbox[dims[1],1], xmax = Cbox[dims[1],2],
ymin = Cbox[dims[2],1], ymax = Cbox[dims[2],2]),
color = "blue", fill = NA, size = 0.1)
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
})
gridExtra::grid.arrange(plist[[1]], plist[[2]], plist[[3]], nrow = 1,
top = paste0("t = ", tt, " out of ", TT))
}
library("tidyverse")
library("scattermore")
library("flowmix")
library("flowcut")
dir.output <- "~/Dropbox/code/output/MCMC-image/"
MM <- floor(Nmc*0.333)
dim(datobj$X) ## p x TT
pos.mn <- list()
for(kk in 1:numclust){
pos.mn[[kk]] <- mclapply(1:dim(res$pos.beta)[4], function(mm){
res$pos.beta[,,kk,mm,drop=TRUE]%*% rbind(1,datobj$X)},
mc.cores = detectCores())%>%
abind::abind(.,along=3)
}
post.mn.mean <- lapply(pos.mn, function(aa){
apply(aa[,, MM:Nmc],c(1,2),mean)}) %>%
abind::abind(.,along=3) %>%  aperm(., c(2,1,3))
post.Sigma <- lapply(1:numclust, function(kk){
apply(res$pos.Sigma[,,kk,MM:Nmc], c(1,2), mean)})%>%
abind::abind(.,along=3) %>%  aperm(., c(3,1,2))
pos.SB <- apply(res$pos.gamma, c(2,3), function(ga)
1/(1+exp(-t(ga) %*% rbind(1,datobj$X))))
pos.MN <- apply(pos.SB, c(1,3), flowcut:::SB2MN)
post.pi.mean <- apply(pos.MN[,, MM:Nmc],c(1,2), mean) %>% t()
library("flowcut")
flowcut::run.Gibbs.fast
10*60*60/23
1200*23/60/60
matrixsampling::rinvwishart
isSymmetricMatrix
matrixsampling::isSymmetricMatrix
matrixsampling:::isSymmetricMatrix
ls()
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
flowcut::run.Gibbs.fast
Sn.ell
nu0
matrixsampling::rinvwishart(1, nu0 + dimdat +
m.ell[ell], S0 + Sn.ell, checkSymmetry = FALSE)[, , 1]
Rfast::is.symmetric(Sn.ell)
Sn.ell
S0
sqrt(S0)
length(sse)
Rfast::is.symmetric(sse[[1]])
sse[[1]]
isSymmetric(sse[[1]])
sapply(sse, isSymmetric)
isSymmetric(Sn.ell)
sapply(sse,length)
q()
q
setwd("")
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
library("flowcut")
flowcut::run.Gibbs.fast
gap = 0
Nmc <- 50
Nmc <- 50
gg=0.1
Nburn <- 50
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
Nmc <- Nburn <- 50
gg <- 0.1
gap <- 0
dim(Gibbs.res)
length(Gibbs.res)
dim(Gibbs.res$pos.beta)
matrixsampling::rinvwishart
0.42*qnorm(0.99)
ES
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
install.packages("./flowcut/", repos = NULL, type="source")
Nmc <- Nburn <- 50
flowcut::run.Gibbs.fast
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
setwd("~/Documents/GitHub/flowcut/")
remotes::install_github("sangwon-hyun/flowcut", subdir = "flowcut")
11*60*60/23
exp(3)
3*50
177*51/60/60
2*60+2+11
133/51
133/51*60
133/52*60
gamma.ell <- matrix(1, nrow = 40, ncol = 9)
tmp <- Rfast::Crossprod(gamma.ell)
dim(tmp)
tmp <- Rfast::Crossprod(gamma.ell,gamma.ell)
dim(tmp)
dim(X)
X <- datobj$X
dim(X)
dim(X0)
b_gamma <- 1.5
b_gamma_n
gamma.ell%>% dim()
head(gamma.ell)
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
4*60*3
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
flowcut::run.Gibbs.fast
library("flowcut")
flowcut::run.Gibbs.fast
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
rmarkdown::find_pandoc()
remotes::install_github("jacobbien/litr-project@*release", subdir = "litr")
Sys.getenv("RSTUDIO_PANDOC")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
## install.packages("./flowcut/", repos = NULL, type="source")
install.packages("./flowcut/", repos = NULL, type="source")
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
