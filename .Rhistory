tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE) * 0.99
tmp
tmp = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE) * 0.9
tmp
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.95
ymin
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE)
ymin
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE) * 0.9
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.75 * ymax + 0.25 * Cbox[,2]
ymax
ymin = 0.5 * (ymin - Cbox[,1]) + Cbox[,1]
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymin = 0.5 * (ymin - Cbox[,1]) + Cbox[,1]
ymin
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.5 * (ymax - Cbox[,2]) + Cbox[,2]
ymax
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.7 * (ymax - Cbox[,2]) + Cbox[,2]
ymax
lims = cbind(ymin, ymax)
lims
Cbox = res$dat.info$Cbox
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.7 * (ymax - Cbox[,2]) + Cbox[,2]
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymin = 0.7 * (ymin - Cbox[,1]) + Cbox[,1]
lims = cbind(ymin, ymax)
dimnames = c("diam", "red", "orange")
for(tt in c(50,100,150,200)){
plist = lapply(list(c(1,2), c(2,3), c(3,1)), function(dims){
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
y = res$last.imputed$last.ylist[[tt]][,dims]
z = res$last.imputed$last.Z.list[[tt]]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_point(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
ylim(lims[dims[2],]) +  xlim(lims[dims[1],])+
geom_rect(aes(xmin = Cbox[dims[1],1], xmax = Cbox[dims[1],2],
ymin = Cbox[dims[2],1], ymax = Cbox[dims[2],2]),
color = "blue", fill = NA)
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
})
gridExtra::grid.arrange(plist[[1]], plist[[2]], plist[[3]], nrow = 1,
top = paste0("t = ", tt, " out of ", TT))
}
Cbox = res$dat.info$Cbox
ymax = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMaxs(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMaxs(., value=TRUE)
ymax = 0.6 * (ymax - Cbox[,2]) + Cbox[,2]
ymin = lapply(res$last.imputed$last.ylist, function(yy)
Rfast::colMins(yy,value=TRUE))%>% do.call(rbind,.) %>%
colMins(., value=TRUE) * 0.9
ymin = 0.6 * (ymin - Cbox[,1]) + Cbox[,1]
lims = cbind(ymin, ymax)
dimnames = c("diam", "red", "orange")
for(tt in seq(from=1, to = 296, by = 10)){
plist = lapply(list(c(1,2), c(2,3), c(3,1)), function(dims){
mn = post.mn.mean[tt,dims,]
sigma = post.Sigma[,dims,dims]
prob = post.pi.mean[tt,]
y = res$last.imputed$last.ylist[[tt]][,dims]
z = res$last.imputed$last.Z.list[[tt]]
varnames = dimnames[dims] ##paste0("dim", dims)
varname1 = varnames[1]
varname2 = varnames[2]
colnames(y) = varnames
y = y %>% as_tibble()
p = ggplot(y, aes(x = !!sym(varname1), y = !!sym(varname2), colour = factor(z))) +
geom_scattermore(alpha = 0.5, size = 0.1) +
geom_tile(alpha = 0.5) +
xlim(lims[dims[1],])+ ylim(lims[dims[2],]) +
geom_rect(aes(xmin = Cbox[dims[1],1], xmax = Cbox[dims[1],2],
ymin = Cbox[dims[2],1], ymax = Cbox[dims[2],2]),
color = "blue", fill = NA, size = 0.1)
p = flowmix::add_model_2d(p, mn, sigma, prob)
return(p)
})
gridExtra::grid.arrange(plist[[1]], plist[[2]], plist[[3]], nrow = 1,
top = paste0("t = ", tt, " out of ", TT))
}
library("tidyverse")
library("scattermore")
library("flowmix")
library("flowcut")
dir.output <- "~/Dropbox/code/output/MCMC-image/"
MM <- floor(Nmc*0.333)
dim(datobj$X) ## p x TT
pos.mn <- list()
for(kk in 1:numclust){
pos.mn[[kk]] <- mclapply(1:dim(res$pos.beta)[4], function(mm){
res$pos.beta[,,kk,mm,drop=TRUE]%*% rbind(1,datobj$X)},
mc.cores = detectCores())%>%
abind::abind(.,along=3)
}
post.mn.mean <- lapply(pos.mn, function(aa){
apply(aa[,, MM:Nmc],c(1,2),mean)}) %>%
abind::abind(.,along=3) %>%  aperm(., c(2,1,3))
post.Sigma <- lapply(1:numclust, function(kk){
apply(res$pos.Sigma[,,kk,MM:Nmc], c(1,2), mean)})%>%
abind::abind(.,along=3) %>%  aperm(., c(3,1,2))
pos.SB <- apply(res$pos.gamma, c(2,3), function(ga)
1/(1+exp(-t(ga) %*% rbind(1,datobj$X))))
pos.MN <- apply(pos.SB, c(1,3), flowcut:::SB2MN)
post.pi.mean <- apply(pos.MN[,, MM:Nmc],c(1,2), mean) %>% t()
library("flowcut")
flowcut::run.Gibbs.fast
10*60*60/23
1200*23/60/60
matrixsampling::rinvwishart
isSymmetricMatrix
matrixsampling::isSymmetricMatrix
matrixsampling:::isSymmetricMatrix
ls()
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
flowcut::run.Gibbs.fast
Sn.ell
nu0
matrixsampling::rinvwishart(1, nu0 + dimdat +
m.ell[ell], S0 + Sn.ell, checkSymmetry = FALSE)[, , 1]
Rfast::is.symmetric(Sn.ell)
Sn.ell
S0
sqrt(S0)
length(sse)
Rfast::is.symmetric(sse[[1]])
sse[[1]]
isSymmetric(sse[[1]])
sapply(sse, isSymmetric)
isSymmetric(Sn.ell)
sapply(sse,length)
q()
q
setwd("")
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
library("flowcut")
flowcut::run.Gibbs.fast
gap = 0
Nmc <- 50
Nmc <- 50
gg=0.1
Nburn <- 50
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
Nmc <- Nburn <- 50
gg <- 0.1
gap <- 0
dim(Gibbs.res)
length(Gibbs.res)
dim(Gibbs.res$pos.beta)
matrixsampling::rinvwishart
0.42*qnorm(0.99)
ES
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
install.packages("./flowcut/", repos = NULL, type="source")
Nmc <- Nburn <- 50
flowcut::run.Gibbs.fast
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
setwd("~/Documents/GitHub/flowcut/")
remotes::install_github("sangwon-hyun/flowcut", subdir = "flowcut")
11*60*60/23
exp(3)
3*50
177*51/60/60
2*60+2+11
133/51
133/51*60
133/52*60
gamma.ell <- matrix(1, nrow = 40, ncol = 9)
tmp <- Rfast::Crossprod(gamma.ell)
dim(tmp)
tmp <- Rfast::Crossprod(gamma.ell,gamma.ell)
dim(tmp)
dim(X)
X <- datobj$X
dim(X)
dim(X0)
b_gamma <- 1.5
b_gamma_n
gamma.ell%>% dim()
head(gamma.ell)
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
4*60*3
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
flowcut::run.Gibbs.fast
library("flowcut")
flowcut::run.Gibbs.fast
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
rmarkdown::find_pandoc()
remotes::install_github("jacobbien/litr-project@*release", subdir = "litr")
setwd("~/Documents/GitHub/flowcut/")
install.packages("pandoc")
library("pandoc")
rmarkdown::find_pandoc()
pandoc_version()
pandoc_install("3.1.6")
pandoc_install("3.5")
pandoc_version()
rmarkdown::find_pandoc()
pandoc_version()
library("pandoc")
pandoc_version()
rmarkdown::find_pandoc()
setwd("~/Documents/GitHub/flowcut/")
library("flowcut")
flowcut::run.Gibbs.fast
rmarkdown::pandoc_available()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library("rmarkdown")
rmarkdown::pandoc_available()
rmarkdown::find_pandoc()
rmarkdown::find_pandoc
devtools::install_github('rstudio/rmarkdown')
pandoc_install("3.5")
library("pandoc")
pandoc_install("3.5")
rmarkdown::find_pandoc()
dir.output <- "~/Dropbox/code/output/MCMC-image/"
dir.report <- "~/Dropbox/code/output/mixing-report/"
dir.code <- "~/Dropbox/code/real-data-code/"
setwd(dir.code)
configs <- cbind(10, paste0('2410',30,'-more'))
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-mixing-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('BMoE-check-mixing.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
dir.code <- "~/Dropbox/code/real-data-code/"
dir.output <- "~/Dropbox/code/output/MCMC-image/"
dir.report <- "~/Dropbox/code/output/clustering-report/"
setwd(dir.code)
configs <- cbind(10, paste0('2410',30,'-more'))
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-clustering-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('clustering-last-draw.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
dir.output <- "~/Dropbox/code/output/MCMC-image/"
dir.report <- "~/Dropbox/code/output/mixing-report/"
dir.code <- "~/Dropbox/code/real-data-code/"
setwd(dir.code)
configs <- cbind(10, paste0('2410',31,'-test'))
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-mixing-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('BMoE-check-mixing.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
dir.code <- "~/Dropbox/code/real-data-code/"
dir.output <- "~/Dropbox/code/output/MCMC-image/"
dir.report <- "~/Dropbox/code/output/clustering-report/"
setwd(dir.code)
configs <- cbind(10, paste0('2410',31,'-test'))
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-clustering-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('clustering-last-draw.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
dir.output <- "~/Dropbox/code/output/MCMC-image/"
dir.report <- "~/Dropbox/code/output/mixing-report/"
dir.code <- "~/Dropbox/code/real-data-code/"
setwd(dir.code)
configs <- cbind(10, paste0('2410',31,'-test'))
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-mixing-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('BMoE-check-mixing.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
setwd("~/Documents/GitHub/flowcut/")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
1600*23/3600
dir.output <- "~/Dropbox/code/output/MCMC-image/"
dir.report <- "~/Dropbox/code/output/mixing-report/"
dir.code <- "~/Dropbox/code/real-data-code/"
setwd(dir.code)
configs <- cbind(10, paste0('2410',31,'-X0'))
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-mixing-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('BMoE-check-mixing.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
dir.report <- "~/Dropbox/code/output/clustering-report/"
for(ii in 1:nrow(configs)){
params <- list(numclust =configs[ii,1], timestamp = configs[ii,2])
output.filename <- paste0('MCMC-clustering-report-numclust',
params$numclust,'-',
params$timestamp,'.pdf')
rmarkdown::render('clustering-last-draw.Rmd', envir = new.env() ,
params= params,
output_file = paste0(dir.report,output.filename))
}
Sys.getenv('RSTUDIO_PANDOC')
litr::render("index.Rmd", output_format = litr::litr_gitbook())
library("tidyverse")
library("flowcut")
library("flowtrend")
dir.output <- "~/Dropbox/code/synthetic-flowcut/"
setwd(dir.output)
dir.dat <- "~/Dropbox/code/synthetic-flowcut/"
isignal <- 0
datobj <- readRDS(file = file.path(dir.dat, paste0("isignal-", isignal, "-datobj.RDS")))
TT <- length(datobj$ylist)
nt <- sapply(datobj$ylist, nrow)
dimdat <- datobj$ylist[[1]] %>% dim() %>% .[2]
numclust <- 2
orig_model = readRDS(file=file.path("~/repos/flowcut/inst/output", "orig_model.RDS"))
new_model = flowcut::make_model(orig_model, isignal = isignal)
flowtrend::plot_1d(datobj$ylist, obj = new_model)
Nmc <- 1e4
Nburn <- 500
ggvec <- c(1, 0.5, 0.1, 0.01)
res <- parallel::mclapply(ggvec, function(gg){
flowcut::run.Gibbs.fast(Nmc = Nmc, Nburn = Nburn,
ylist = datobj$ylist,
countslist = datobj$countslist,
X = t(datobj$X),
Cbox = datobj$Cbox,
numclust = 2,
gg= gg,
n.cores = floor(detectCores()/length(ggvec)),
verbose = FALSE)}, mc.cores = detectCores())
saveRDS(res, file.path(dir.output, paste0("isignal-0-gibbs-ggcompare.RDS")))
res[[1]] %>% names()
plot(res[[1]]$pos.avgloglik, type = "l")
plot(res[[4]]$pos.avgloglik, type = "l")
objlist = list()
mnplot_list = list()
Xnames <- res[[1]]$dat.info$X %>% rownames()
for(ii in 1:length(ggvec)){
mnplot = make_mn_plot(res[[ii]], new_model, c(-0.5, +0.0)) + ggtitle(paste0("g=", ggvec[ii]))
mnplot_list[[ii]] = mnplot
objlist[[ii]]  <- make_beta_ci(res[[ii]], new_model, Xnames)
}
litr::render("index.Rmd", output_format = litr::litr_gitbook())
setwd("~/Documents/GitHub/flowcut/")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
getwd()
setwd("~/Documents/GitHub/flowcut/")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
setwd("~/Documents/GitHub/flowcut/")
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
flowcut::run.Gibbs.fast()
flowcut::run.Gibbs.fast
litr::render("index.Rmd", output_format = litr::litr_gitbook())
install.packages("./flowcut/", repos = NULL, type="source")
install.packages(psych)
install.packages("psych")
install.packages(caret)
install.packages("caret")
Gamma(10)
gamma(1/2)
return(xx^2+exp(xx^2) + 1/xx + log(abs(xx))+gamma(abs(xx)))
Tstat <- function(xx){
return(xx^2+exp(xx^2) + 1/xx + log(abs(xx))+gamma(abs(xx)))
}
Tstat(3)
x <- rnorm(1e5)
hist(x,breaks = "FD")
y <- Tstat(x)
hist(y)
hist(y,breaks = "FD")
hist(y)
hist(y, xlim = c(-100,1000))
hist(y, xlim = c(-100,1000),breaks = 100)
hist(y[y<1000], xlim = c(-100,1000),breaks = 100)
hist(y[y<1000], xlim = c(-100,100),breaks = 100)
F <- ecdf(y)
plot(F)
plot(F, xlim=c(-100,100))
z <- rnorm(1e4)
zz <- Tstat(z)
hist(F(zz),breaks = "FD")
Tstat <- function(xx){
return(xx)
}
x <- rnorm(1e5)
y <- Tstat(x)
F <- ecdf(y)
z <- rnorm(1e4)
zz <- Tstat(z)
hist(zz)
hist(F(zz),breaks = "FD")
library("flowcut/")
library("flowcut")
flowcut::run.Gibbs.fast
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
library("flowcut")
22+14
getwd()
warnings()
dim(res$pos.sig2_gamma)
ceiling((K-1)/3)
ceiling((11-1)/3)
kk
kk <- 1
res$pos.sig2_gamma[kk,]
setwd("~/Documents/GitHub/flowcut/")
install.packages("./flowcut/", repos = NULL, type="source")
